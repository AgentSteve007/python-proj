import networkx as nx
from math import e
import matplotlib.pyplot as plt

distances = [(1,2,23),
            (1,3,42),
            (1,4,40),
            (1,5,25),
            (1,6,22),
            (2,3,20),
            (2,4,30),
            (2,5,34),
            (2,6,13),
            (3,4,22),
            (3,5,41),
            (3,6,21),
            (4,5,26),
            (4,6,19),
            (5,6,22)]

V = [1,3,4,5,6,2,1]
Z = [(4,5),
     (5,6),
     (2,4),
     (6,2)]
P = [78,24,63,17]
T = 100

def probability(delta,T):
    return 100*e**(-delta/T)
def reductTemp(prevT):
    nextT=0.5*prevT
    return nextT
graph = nx.Graph()
graph.add_weighted_edges_from(distances)
nx.draw_kamada_kawai(graph, node_color = '#999555', node_size = 2000, with_labels = True)

def edgeLength(i,j,distances,roundTrip=True):
    if roundTrip:
        return max([(item[2] if (item[0] == i and item[1] == j)or(item[1] == i and item[0] == j)else -1)
                   for item in distances])
    else:
        return max([(item[2] if (item[0] == i and item[1] == j)else -1) for item in distances])


def routeLength(V, distances):
    edges = []

    for i in range(len(V) - 1):
        edges.append(edgeLength(V[i], V[i + 1], distances))
    return sum(edges)


def routeOneReplacement(arrV, Z, replacementByName=True):
    decrement = 1 if replacementByName else 0

    arrV[Z[0] - decrement], arrV[Z[1] - decrement] = arrV[Z[1] - decrement], arrV[Z[0] - decrement]
    return arrV

def routeReplacement(V,Z):
    for z in Z:
        V = routeOneReplacement(V,z)
        return V


def chooseRoute(distances, V, Z, T, P):
    sumLength = routeLength(V, distances)
    arrSum = [sumLength]
    bestEdges = []

    for i in range(len(Z)):
        newV = routeOneReplacement(V[:], Z[i])
        newS = routeLength(newV, distances)
        arrSum.append(newS)
        deltaS = newS - sumLength

        if deltaS > 0:
            p = probability(deltaS, T)
            if deltaS > 0:
                p = probability(deltaS, T)
                if p > P[i]:
                    V = newV
                    sumLength = newS
                    bestEdges = [(V[j], V[j + 1]) for j in range(len(V) - 1)]
            else:
                V = newV
                sumLength = newS
                bestEdges = [(V[j], V[j + 1]) for j in range(len(V) - 1)]
            T = reductTemp(T)

    return V, arrSum, bestEdges


def drawRouteGraph(distances, bestRouteEdges):
    graph = nx.Graph()
    graph.add_weighted_edges_from(distances)
    nx.draw_kamada_kawai(graph, node_color='#999555', node_size=2000, with_labels=True)
    best_route_graph = nx.Graph()
    best_route_graph.add_edges_from(bestRouteEdges)
    nx.draw_networkx_edges(best_route_graph, pos=nx.kamada_kawai_layout(graph), edge_color='red', width=2)


bestRoute, arrLength, bestRouteEdges = chooseRoute(distances, V, Z, T, P)
print(f'Лучший выбранный маршрут: {bestRoute}')
print(f'Длина лучшего выбранного маршрута: {routeLength(bestRoute, distances)}')
print(f'Длины всех рассмотренных маршрутов: {arrLength}')
drawRouteGraph(distances, bestRouteEdges)
plt.show()
